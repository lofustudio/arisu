// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bot {
  id     String @id @default("")
  prefix String @default(">")
  port   Int    @default(3000)
  status Json   @default("{ \"type\": \"WATCHING\", \"message\": \"The Cookie Jar\", \"twitch\": \"lofustudio\" }")
}

model Guild {
  id         String      @id
  prefix     String      @default(">")
  moderation Moderation?
  backup     Backup?

  guildUser GuildUser[]
}

model GlobalUser {
  id        String      @id
  guildUser GuildUser[]
  admin     Boolean     @default(false)
}

model GuildUser {
  globalUser   GlobalUser @relation(fields: [globalUserId], references: [id], onDelete: Cascade)
  globalUserId String
  guild        Guild      @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId      String
  prefix       String?

  @@id([globalUserId, guildId])
}

model Moderation {
  guild   Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String  @id
  enabled Boolean @default(true)
  mute    String?
}

model Backup {
  guild                       Guild     @relation(fields: [id], references: [id])
  id                          String    @id
  name                        String
  icon                        String?
  splash                      String?
  discoverySplash             String?
  afkChannelId                String?
  afkTimeout                  Int
  widgetEnabled               Boolean   @default(false)
  widgetChannelId             String?
  verificationLevel           Int
  defaultMessageNotifications Int
  explicitContentFilter       Int
  roles                       Role[]
  emojis                      Emoji[]
  features                    String[]
  mfaLevel                    Int
  systemChannelId             String?
  systemChannelFlags          Int
  rulesChannelId              String?
  description                 String?
  preferredLocale             String    @default("en-US")
  publicUpdatesChannelId      String?
  stickers                    Sticker[]
  premiumProgressBarEnabled   Boolean

  Channel Channel[]
}

model Role {
  id           String  @id
  guild        Backup  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId      String
  name         String
  color        Int
  hoist        Boolean
  icon         String?
  unicodeEmoji String?
  position     Int
  permissions  String
  managed      Boolean
  mentionable  Boolean

  emojis EmojisOnRoles[]
}

model Emoji {
  id      String          @id
  guild   Backup          @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId String
  roles   EmojisOnRoles[]
  image   String
}

model EmojisOnRoles {
  emoji   Emoji  @relation(fields: [emojiId], references: [id], onDelete: Cascade)
  emojiId String
  role    Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  // * Deleting the role would remove the role restriction, which is not what Discord does (requires testing)
  roleId  String

  @@id([emojiId, roleId])
}

model Sticker {
  id          String @id
  guild       Backup @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId     String
  name        String
  description String
  tags        String
  file        String
}

model Channel {
  id                   String   @id
  guild                Backup   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId              String
  type                 Int
  position             Int
  permissionOverwrites Json
  name                 String
  topic                String?
  nsfw                 Boolean?
  bitrate              Int?
  userLimit            Int?
  rateLimitPerUser     Int?
  parent               Channel? @relation("Categories", fields: [parentId], references: [id], onDelete: SetNull)
  parentId             String?
  rtcRegion            String?

  children Channel[] @relation("Categories")
}

model Logs {
  id        Int      @id @default(autoincrement())
  module    String
  message   String
  timestamp DateTime @default(now())
}
